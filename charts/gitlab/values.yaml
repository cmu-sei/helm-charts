replicaCount: 1

image:
  repository: gitlab/gitlab-ce
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# If this deployment needs to trust non-public certificates,
# create a configMap with the needed certifcates and specify
# the configMap name here
certificateMap: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# storage - either an existing pvc, the size for a new pvc, or emptyDir
storage:
  existing: ""
  size: ""
  mode: ReadWriteOnce
  class: default

nodeSelector: {}

tolerations: []

affinity: {}

command: [ "bash", "-c", "update-ca-certificates && /assets/wrapper" ]


initialRootPassword: ""

env:
  GITLAB_OMNIBUS_CONFIG: "from_file('/conf/gitlab.rb')"
  https_proxy: ""
  http_proxy: ""
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: ""
  no_proxy: ""

# settings: 'external_url "";
# gitlab_rails["initial_root_password"] = File.read("/secrets/initial_root_password");
# gitlab_rails["env"] = {
#   "http_proxy" => "",
#   "https_proxy"=> "",
#   "no_proxy" => ""
# };

# gitlab_rails["backup_path"] = "/backup";
# gitlab_rails["manage_backup_path"] = false;

# # Use this instead of socket because of filesytem permission issues:
# # https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4696
# gitlab_workhorse["listen_network"] = "tcp";
# gitlab_workhorse["listen_addr"] = "127.0.0.1:8181";

# gitlab_rails["db_adapter"] = "postgresql";
# gitlab_rails["db_encoding"] = "unicode";
# gitlab_rails["db_host"] = "";
# gitlab_rails["db_password"] = "";

# nginx["enable"] = true;
# nginx["redirect_http_to_https"] = false;
# nginx["listen_port"] = 80;
# nginx["listen_https"] = false;
# nginx["http2_enabled"] = false;
# nginx["proxy_set_headers"] = {
#   "Host" => "$http_host",
#   "X-Real-IP" => "$remote_addr",
#   "X-Forwarded-For" => "$proxy_add_x_forwarded_for",
#   "X-Forwarded-Proto" => "https",
#   "X-Forwarded-Ssl" => "on"
# };

# gitlab_rails["omniauth_enabled"] = true;
# gitlab_rails["omniauth_allow_single_sign_on"] = true;
# gitlab_rails["omniauth_block_auto_created_users"] = false;
# gitlab_rails["omniauth_auto_sign_in_with_provider"] = "identity";
# gitlab_rails["omniauth_external_providers"] = ["identity"];
# gitlab_rails["omniauth_providers"] = [
#     {
#         "name" => "openid_connect",
#         "label" => "Identity",
#         "args"=> {
#             "name" => "identity",
#              "scope" => ["openid","profile","email"],
#              "response_type"=>"code",
#              "discovery"=>true,
#              "issuer" => "",
#              "client_options" => {
#                 "identifier" => "gitlab",
#                 "secret" => "",
#                 "redirect_uri" => "",
#                 "port" => "443",
#                 "scheme" => "https",
#                 "host" => "",
#             }
#         }
#     }
# ];

# prometheus["enable"] = false;'