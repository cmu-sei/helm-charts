# Default values for player-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cmusei/player-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# If this deployment needs to trust non-public certificates,
# create a configMap with the needed certifcates and specify
# the configMap name here
certificateMap: ''
certificateSecret: ''

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

command: ['bash', '-c', 'update-ca-certificates && dotnet Player.Api.dll']


# storage - either an existing pvc, the size for a new pvc, or emptyDir
storage:
  existing: ""
  size: ""
  mode: ReadWriteOnce
  class: default


identity:
  register: false
  identityMap: ''
  initCommand: ''
  # SAMPLE IDENTITY CONFIGS 
  # client: |-
  #   [
  #     {
  #       "name": "player-api",
  #       "displayName": "Player API",
  #       "description": null,
  #       "grants": "authorization_code client_credentials",
  #       "scopes": "openid profile player-api",
  #       "enabled": true,
  #       "requirePkce": true,
  #       "allowAccessTokensViaBrowser": false,
  #       "requireConsent": false,
  #       "consentLifetime": "30d",
  #       "alwaysIncludeUserClaimsInIdToken": false,
  #       "identityTokenLifetime": "5m",
  #       "accessTokenLifetime": "1h",
  #       "authorizationCodeLifetime": "5m",
  #       "allowOfflineAccess": false,
  #       "updateAccessTokenClaimsOnRefresh": false,
  #       "useOneTimeRefreshTokens": false,
  #       "slidingRefreshTokenLifetime": "15d",
  #       "absoluteRefreshTokenLifetime": "30d",
  #       "published": false,
  #       "url": "https://example.com/player",
  #       "logoUrl": null,
  #       "frontChannelLogoutUrl": null,
  #       "backChannelLogoutUrl": null,
  #       "redirectUrls": [
  #         { "value": "https://example.com/player/api/outh2-redirect.html" }
  #       ],
  #       "postLogoutUrls": [{ "value": "https://example.com/player/api" }],
  #       "corsUrls": [{ "value": "https://example.com" }],
  #       "alwaysSendClientClaims": false,
  #       "clientClaimsPrefix": "client_",
  #       "claims": [],
  #       "secrets": [],
  #       "managers": []
  #     },
  #     {
  #       "name": "player-admin",
  #       "displayName": "Player Admin",
  #       "description": null,
  #       "grants": "password client_credentials",
  #       "scopes": "player-api vm-api",
  #       "enabled": true,
  #       "requirePkce": true,
  #       "allowAccessTokensViaBrowser": false,
  #       "requireConsent": false,
  #       "consentLifetime": "30d",
  #       "alwaysIncludeUserClaimsInIdToken": false,
  #       "identityTokenLifetime": "5m",
  #       "accessTokenLifetime": "1h",
  #       "authorizationCodeLifetime": "5m",
  #       "allowOfflineAccess": false,
  #       "updateAccessTokenClaimsOnRefresh": false,
  #       "useOneTimeRefreshTokens": false,
  #       "slidingRefreshTokenLifetime": "15d",
  #       "absoluteRefreshTokenLifetime": "30d",
  #       "published": true,
  #       "url": "https://example.com/player",
  #       "logoUrl": null,
  #       "frontChannelLogoutUrl": null,
  #       "backChannelLogoutUrl": null,
  #       "corsUrls": [{ "value": "https://example.com" }],
  #       "alwaysSendClientClaims": false,
  #       "clientClaimsPrefix": "client_",
  #       "claims": [],
  #       "secrets": [],
  #       "managers": []
  #     }
  #   ]
    
  # resource: |-
  #   {
  #     "type": "api",
  #     "name": "player-api",
  #     "displayName": "Player Api",
  #     "enabled": true,
  #     "default": true,
  #     "required": false,
  #     "emphasize": false,
  #     "showInDiscoveryDocument": true
  #   }
  
  # account: |-
  #   {
  #     "usernames": ["player-admin@example.com"],
  #     "password": "foundry",
  #     "manager": true
  #   }

# env is pod env vars
env:
  # http_proxy: ""
  # https_proxy: ""
  # HTTP_PROXY: ""
  # HTTPS_PROXY: ""
  # NO_PROXY: ""
  # no_proxy: ""

  ## If hosting in virtual directory, specify path base
  PathBase: ""

  Logging__IncludeScopes: false
  Logging__Debug__LogLevel__Default: Information
  Logging__Debug__LogLevel__Microsoft: Error
  Logging__Debug__LogLevel__System: Error
  Logging__Console__LogLevel__Default: Information
  Logging__Console__LogLevel__Microsoft: Error
  Logging__Console__LogLevel__System: Error

  # database requires the 'uuid-ossp' extension installed
  ConnectionStrings__PostgreSQL: ''
  Database__AutoMigrate: true
  Database__DevModeRecreate: false
  Database__Provider: PostgreSQL

  CorsPolicy__Origins__0: ''
  CorsPolicy__Methods__0: ''
  CorsPolicy__Headers__0: ''
  CorsPolicy__AllowAnyOrigin: false
  CorsPolicy__AllowAnyMethod: true
  CorsPolicy__AllowAnyHeader: true
  CorsPolicy__SupportsCredentials: true

  Authorization__Authority: ''
  Authorization__AuthorizationUrl: ''
  Authorization__TokenUrl: ''
  Authorization__AuthorizationScope: 'player-api'
  Authorization__ClientId: player-api-dev
  Authorization__ClientName: 'Player API'
  Authorization__ClientSecret: ''
  Authorization__RequireHttpsMetaData: false

  SeedData__Permissions__0__Key: SystemAdmin
  SeedData__Permissions__0__Value: 'true'
  SeedData__Permissions__0__Description: 'Can do anything'
  SeedData__Permissions__0__ReadOnly: true
  SeedData__Permissions__1__Key: ViewAdmin
  SeedData__Permissions__1__Value: 'true'
  SeedData__Permissions__1__Description: 'Can edit an View, Add/Remove Teams/Members, etc'
  SeedData__Permissions__1__ReadOnly: true

  SeedData__SystemAdminIds__0: ''

  ClaimsTransformation__EnableCaching: true
  ClaimsTransformation__CacheExpirationSeconds: 60

  Notifications__UserIconUrl: '/assets/img/SP_Icon_User.png'
  Notifications__SystemIconUrl: '/assets/img/SP_Icon_Alert.png'
  Notifications__HelpDeskApplicationName: 'Help Desk'

  FileUpload__basePath: '/fileupload'
  FileUpload__maxSize: '64000000'
  FileUpload__allowedExtensions__0: '.pdf'
  FileUpload__allowedExtensions__1: '.png'
  FileUpload__allowedExtensions__2: '.jpg'
  FileUpload__allowedExtensions__3: '.jpeg'
  FileUpload__allowedExtensions__4: '.doc'
  FileUpload__allowedExtensions__5: '.docx'
  FileUpload__allowedExtensions__6: '.gif'
  FileUpload__allowedExtensions__7: '.txt'