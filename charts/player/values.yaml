player-api:

  # Docker image release version
  image:
    tag: "2.0.2"
  
  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-read-timeout: '86400'
      nginx.ingress.kubernetes.io/proxy-send-timeout: '86400'
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: player.example.com
        paths:
        - path: /(hubs|swagger|api)
          pathType: ImplementationSpecific
    tls:
      - secretName: ""
        hosts:
         - example.com

  # If this deployment needs to trust non-public certificates,
  # create a configMap with the needed certifcates and specify
  # the configMap name here
  certificateMap: ""

  # storage - either an existing pvc, the size for a new pvc, or emptyDir
  # this is used to store uploaded files
  storage:
    existing: ""
    size: ""
    mode: ReadWriteOnce
    class: default

  identity:
    register: false
    identityMap: ''
    initCommand: ''
    # SAMPLE IDENTITY CONFIGS 
    # client: |-
    #   [
    #     {
    #       "name": "player-api",
    #       "displayName": "Player API",
    #       "description": null,
    #       "grants": "authorization_code client_credentials",
    #       "scopes": "openid profile player-api",
    #       "enabled": true,
    #       "requirePkce": true,
    #       "allowAccessTokensViaBrowser": false,
    #       "requireConsent": false,
    #       "consentLifetime": "30d",
    #       "alwaysIncludeUserClaimsInIdToken": false,
    #       "identityTokenLifetime": "5m",
    #       "accessTokenLifetime": "1h",
    #       "authorizationCodeLifetime": "5m",
    #       "allowOfflineAccess": false,
    #       "updateAccessTokenClaimsOnRefresh": false,
    #       "useOneTimeRefreshTokens": false,
    #       "slidingRefreshTokenLifetime": "15d",
    #       "absoluteRefreshTokenLifetime": "30d",
    #       "published": false,
    #       "url": "https://example.com/player",
    #       "logoUrl": null,
    #       "frontChannelLogoutUrl": null,
    #       "backChannelLogoutUrl": null,
    #       "redirectUrls": [
    #         { "value": "https://example.com/player/api/outh2-redirect.html" }
    #       ],
    #       "postLogoutUrls": [{ "value": "https://example.com/player/api" }],
    #       "corsUrls": [{ "value": "https://example.com" }],
    #       "alwaysSendClientClaims": false,
    #       "clientClaimsPrefix": "client_",
    #       "claims": [],
    #       "secrets": [],
    #       "managers": []
    #     },
    #     {
    #       "name": "player-admin",
    #       "displayName": "Player Admin",
    #       "description": null,
    #       "grants": "password client_credentials",
    #       "scopes": "player-api vm-api",
    #       "enabled": true,
    #       "requirePkce": true,
    #       "allowAccessTokensViaBrowser": false,
    #       "requireConsent": false,
    #       "consentLifetime": "30d",
    #       "alwaysIncludeUserClaimsInIdToken": false,
    #       "identityTokenLifetime": "5m",
    #       "accessTokenLifetime": "1h",
    #       "authorizationCodeLifetime": "5m",
    #       "allowOfflineAccess": false,
    #       "updateAccessTokenClaimsOnRefresh": false,
    #       "useOneTimeRefreshTokens": false,
    #       "slidingRefreshTokenLifetime": "15d",
    #       "absoluteRefreshTokenLifetime": "30d",
    #       "published": true,
    #       "url": "https://example.com/player",
    #       "logoUrl": null,
    #       "frontChannelLogoutUrl": null,
    #       "backChannelLogoutUrl": null,
    #       "corsUrls": [{ "value": "https://example.com" }],
    #       "alwaysSendClientClaims": false,
    #       "clientClaimsPrefix": "client_",
    #       "claims": [],
    #       "secrets": [],
    #       "managers": []
    #     }
    #   ]
      
    # resource: |-
    #   {
    #     "type": "api",
    #     "name": "player-api",
    #     "displayName": "Player Api",
    #     "enabled": true,
    #     "default": true,
    #     "required": false,
    #     "emphasize": false,
    #     "showInDiscoveryDocument": true
    #   }
    
    # account: |-
    #   {
    #     "usernames": ["player-admin@example.com"],
    #     "password": "foundry",
    #     "manager": true
    #   }

  # Config app settings with environment vars.
  # Those most likely needing values are listed. For others,
  # see https://github.com/cmu-sei/crucible/blob/master/player.api/S3.Player.Api/appsettings.json
  env:
    # Proxy Settings - Set these in your values file if you are behind a proxy.
    # http_proxy: proxy.example.com:9000
    # https_proxy: proxy.example.com:9000
    # HTTP_PROXY: proxy.example.com:9000
    # HTTPS_PROXY: proxy.example.com:9000
    # NO_PROXY: .local
    # no_proxy: .local

    ## If hosting in virtual directory, specify path base
    PathBase: ""

    # CORS policy settings.
    # The first entry should be the URL to player
    # The second entry should be the URL to VM App
    # Subsequent entries can be other integrated apps, such as OSTicket
    CorsPolicy__Origins__0: "https://player.example.com"
    CorsPolicy__Origins__1: "https://vm.example.com"
    CorsPolicy__Origins__2: "https://osticket.example.com"

    # Connection String to database
    # database requires the 'uuid-ossp' extension installed
    ConnectionStrings__PostgreSQL: "Server=postgres;Port=5432;Database=player_api;Username=player_dbu;Password=;"

    # OAuth2 Identity Client for Application
    Authorization__Authority: https://identity.example.com
    Authorization__AuthorizationUrl: https://identity.example.com/connect/authorize
    Authorization__TokenUrl: https://identity.example.com/connect/token
    Authorization__AuthorizationScope: "player-api"
    Authorization__ClientId: player-api-dev
    Authorization__ClientName: "Player API"

    # Basic seed data to jumpstart deployement
    # TODO - Document Seed Data
    SeedData__SystemAdminIds__0: 

player-ui:

  # Docker image release version
  image:
    tag: "2.0.4"

  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true    
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: player.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: ""
        hosts:
         - example.com
  
  identity:
    register: false
    identityMap: ''
    initCommand: ''
    # SAMPLE IDENTITY CONFIGS
    # client: |-
    #   {
    #     "name": "player-ui",
    #     "displayName": "Player UI",
    #     "description": null,
    #     "grants": "authorization_code client_credentials",
    #     "scopes": "openid profile player-api",
    #     "enabled": true,
    #     "requirePkce": true,
    #     "allowAccessTokensViaBrowser": true,
    #     "requireConsent": false,
    #     "consentLifetime": "30d",
    #     "alwaysIncludeUserClaimsInIdToken": false,
    #     "identityTokenLifetime": "5m",
    #     "accessTokenLifetime": "1h",
    #     "authorizationCodeLifetime": "5m",
    #     "allowOfflineAccess": false,
    #     "updateAccessTokenClaimsOnRefresh": false,
    #     "useOneTimeRefreshTokens": false,
    #     "slidingRefreshTokenLifetime": "15d",
    #     "absoluteRefreshTokenLifetime": "30d",
    #     "published": true,
    #     "url": "https://example.com/player",
    #     "logoUrl": null,
    #     "frontChannelLogoutUrl": null,
    #     "backChannelLogoutUrl": null,
    #     "redirectUrls": [
    #       { "value": "https://example.com/player/auth-callback" },
    #       { "value": "https://example.com/player/auth-callback-silent" }
    #     ],
    #     "postLogoutUrls": [{ "value": "https://example.com/player" }],
    #     "corsUrls": [{ "value": "https://example.com" }],
    #     "alwaysSendClientClaims": false,
    #     "clientClaimsPrefix": "client_",
    #     "claims": [],
    #     "secrets": [],
    #     "managers": []
    #   }

  env: 
    ## basehref is path to the app
    APP_BASEHREF: ""

  # Config app settings with a JSON file.
  # These values correspond to an OpenID connect client and
  # some basic configuration
  settings: |-
    {
      "ApiUrl": "https://player.example.com",
      "OIDCSettings": {
        "authority": "https://identity.example.com",
        "client_id": "player-ui-dev",
        "redirect_uri": "https://player.example.com/auth-callback/",
        "post_logout_redirect_uri": "https://player.example.com",
        "response_type": "code",
        "scope": "openid profile player-api",
        "automaticSilentRenew": true,
        "silent_redirect_uri": "https://player.example.com/auth-callback-silent/"
      },
      "NotificationsSettings": {
        "url": "https://player.example.com/hubs",
        "number_to_display": 4
      },
      "AppTitle": "Crucible",
      "AppTopBarText": "Crucible",
      "AppTopBarHexColor": "#b00",
      "AppTopBarHexTextColor": "#FFFFFF",
      "UseLocalAuthStorage": true
    }

vm-api:

  # Docker image release version
  image:
    tag: "2.1.3"
  
  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true  
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-read-timeout: '86400'
      nginx.ingress.kubernetes.io/proxy-send-timeout: '86400'
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: vm.example.com
        paths:
          - path: /(notifications|hubs|api|swagger)
            pathType: ImplementationSpecific
    tls:
      - secretName: ""
        hosts:
         - example.com

  # VM-API deployment adds a second ingress
  # - This ingress is used as a proxy for getting a websocket
  #   console connection to vCenter hosts.
  # - TLS and Host URLs need configured, but the snippet should be left alone
  # NOTES:
  # - This is only used if RewriteHost__RewriteHost below is true, otherwise
  #   connections will go directly from the UI to the vCenter hosts themselves
  # - The host value here corresponds to RewriteHost__RewriteHostUrl below
  consoleIngress:
    deployConsoleProxy: false  
    className: ""
    name: player-connect
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
      nginx.ingress.kubernetes.io/server-snippet: |
        location /ticket {
            proxy_pass https://$arg_vmhost$uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_request_buffering off;
            proxy_buffering off;
            proxy_ssl_session_reuse on;
        }
    hosts:
      - host: connect.example.com
        paths: []
    tls:
      - secretName: ""
        hosts:
         - example.com

  # If this deployment needs to trust non-public certificates,
  # create a configMap with the needed certifcates and specify
  # the configMap name here
  certificateMap: ""

  identity:
    register: false
    identityMap: ''
    initCommand: ''
    # SAMPLE IDENTITY CONFIGS
    # client: |-
    #   {
    #     "name": "vm-api",
    #     "displayName": "VM API",
    #     "description": null,
    #     "grants": "authorization_code client_credentials",
    #     "scopes": "openid profile vm-api player-api",
    #     "enabled": true,
    #     "requirePkce": true,
    #     "allowAccessTokensViaBrowser": false,
    #     "requireConsent": false,
    #     "consentLifetime": "30d",
    #     "alwaysIncludeUserClaimsInIdToken": false,
    #     "identityTokenLifetime": "5m",
    #     "accessTokenLifetime": "1h",
    #     "authorizationCodeLifetime": "5m",
    #     "allowOfflineAccess": false,
    #     "updateAccessTokenClaimsOnRefresh": false,
    #     "useOneTimeRefreshTokens": false,
    #     "slidingRefreshTokenLifetime": "15d",
    #     "absoluteRefreshTokenLifetime": "30d",
    #     "published": false,
    #     "url": "https://example.com/vm",
    #     "logoUrl": null,
    #     "frontChannelLogoutUrl": null,
    #     "backChannelLogoutUrl": null,
    #     "redirectUrls": [
    #       { "value": "https://example.com/vm/api/outh2-redirect.html" }
    #     ],
    #     "postLogoutUrls": [{ "value": "https://example.com/vm/api" }],
    #     "corsUrls": [{ "value": "https://example.com" }],
    #     "alwaysSendClientClaims": false,
    #     "clientClaimsPrefix": "client_",
    #     "claims": [],
    #     "secrets": [],
    #     "managers": []
    #   }
      
    # resource: |-
    #   {
    #     "type": "api",
    #     "name": "vm-api",
    #     "displayName": "VM Api",
    #     "enabled": true,
    #     "default": true,
    #     "required": false,
    #     "emphasize": false,
    #     "showInDiscoveryDocument": true
    #   }
    # account: |-
    #   {
    #     "usernames": ["player-vm-admin@example.com"],
    #     "password": "foundry",
    #     "manager": true
    #   }

  # Config app settings with environment vars.
  # Those most likely needing values are listed. For others,
  # see https://github.com/cmu-sei/crucible/blob/master/vm.api/S3.VM.Api/appsettings.json
  env:
    # Proxy Settings
    # http_proxy: proxy.example.com:9000
    # https_proxy: proxy.example.com:9000
    # HTTP_PROXY: proxy.example.com:9000
    # HTTPS_PROXY: proxy.example.com:9000
    # NO_PROXY: .local
    # no_proxy: .local

    ## If hosting in virtual directory, specify path base
    PathBase: ""

    # Connection String to database
    # database requires the 'uuid-ossp' extension installed
    ConnectionStrings__PostgreSQL: "Server=postgres;Port=5432;Database=vm_api;Username=vm_dbu;Password=;"

    # CORS policy settings.
    # The first entry should be the URL to VM App
    # The second entry should be the URL to Console App
    CorsPolicy__Origins__0: "https://vm.example.com"
    CorsPolicy__Origins__1: "https://console.example.com"

    # OAuth2 Identity Client for Application
    Authorization__Authority: https://identity.example.com
    Authorization__AuthorizationUrl: https://identity.example.com/connect/authorize
    Authorization__TokenUrl: https://identity.example.com/connect/token
    Authorization__AuthorizationScope: "vm-api player-api"
    Authorization__ClientId: vm-api-dev
    Authorization__ClientName: "VM API"

    # OAuth2 Identity Client /w Password
    IdentityClient__TokenUrl: https://identity.example.com/connect/token
    IdentityClient__ClientId: "player-vm-admin"
    IdentityClient__Scope: "player-api vm-api"
    IdentityClient__Username: 
    IdentityClient__Password: 

    # Crucible Player URL
    ClientSettings__urls__playerApi: "https://player.example.com"

    # VCenter settings
    #
    # A privileged vCenter used is required to read and write files
    #
    # A datastore needs to be created for Player to store files.  This is
    # typically an NFS share in the format:  <DATASTORE>/player/
    #
    # - DsName denotes the DataStore name
    # - BaseFolder is the folder inside the DataStore to use
    Vsphere__Host: "vcenter.example.com"
    Vsphere__Username: "player-account@vsphere.local"
    Vsphere__Password: 
    Vsphere__DsName: 
    Vsphere__BaseFolder: "player"

    # Rewrite Host settings
    # See "consoleIngress" section above for usage
    RewriteHost__RewriteHost: false
    RewriteHost__RewriteHostUrl: "connect.example.com"
    RewriteHost__RewriteHostQueryParam: "vmhost"

vm-ui:

  # Docker image release version
  image:
    tag: "2.1.2"

  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true  
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: vm.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: ""
        hosts:
         - example.com

  identity:
    register: false
    identityMap: ''
    initCommand: ''
    # SAMPLE IDENTITY CONFIG
    # client: |-
    #   {
    #     "name": "vm-ui",
    #     "displayName": "VM UI",
    #     "description": null,
    #     "grants": "authorization_code client_credentials",
    #     "scopes": "openid profile vm-api player-api",
    #     "enabled": true,
    #     "requirePkce": true,
    #     "allowAccessTokensViaBrowser": true,
    #     "requireConsent": false,
    #     "consentLifetime": "30d",
    #     "alwaysIncludeUserClaimsInIdToken": false,
    #     "identityTokenLifetime": "5m",
    #     "accessTokenLifetime": "1h",
    #     "authorizationCodeLifetime": "5m",
    #     "allowOfflineAccess": false,
    #     "updateAccessTokenClaimsOnRefresh": false,
    #     "useOneTimeRefreshTokens": false,
    #     "slidingRefreshTokenLifetime": "15d",
    #     "absoluteRefreshTokenLifetime": "30d",
    #     "published": false,
    #     "url": "https://example.com/vm",
    #     "logoUrl": null,
    #     "frontChannelLogoutUrl": null,
    #     "backChannelLogoutUrl": null,
    #     "redirectUrls": [
    #       { "value": "https://example.com/vm/auth-callback" },
    #       { "value": "https://example.com/vm/auth-callback-silent" }
    #     ],
    #     "postLogoutUrls": [{ "value": "https://example.com/vm" }],
    #     "corsUrls": [{ "value": "https://example.com" }],
    #     "alwaysSendClientClaims": false,
    #     "clientClaimsPrefix": "client_",
    #     "claims": [],
    #     "secrets": [],
    #     "managers": []
    #   }

  env: 
    ## basehref is path to the app
    APP_BASEHREF: ""

  # Config app settings with a JSON file.
  # These values correspond to an OpenID connect client
  settings: |-
    {
      "ApiUrl": "https://vm.example.com/api",
      "DeployApiUrl": "",
      "ApiPlayerUrl": "https://player.example.com/api",
      "WelderUrl": "",
      "UserFollowUrl": "https://console.example.com/user/{userId}/view/{viewId}/console",
      "OIDCSettings": {
          "authority": "https://identity.example.com",
          "client_id": "vm-ui-dev",
          "redirect_uri": "https://vm.example.com/auth-callback/",
          "post_logout_redirect_uri": "https://vm.example.com",
          "response_type": "code",
          "scope": "openid profile player-api vm-api",
          "automaticSilentRenew": true,
          "silent_redirect_uri": "https://vm.example.com/auth-callback-silent/"
      },
      "UseLocalAuthStorage": true
    }


console-ui:

  # Docker image release version
  image:
    tag: "2.1.1"

  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true  
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: console.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: ""
        hosts:
         - example.com
  identity:
    register: false
    identityMap: ''
    initCommand: ''
    # SAMPLE IDENTITY CONFIGS
    # client: |-
    #   {
    #     "name": "vm-console-ui",
    #     "displayName": "VM Console UI",
    #     "description": null,
    #     "grants": "authorization_code client_credentials",
    #     "scopes": "openid profile vm-api player-api",
    #     "enabled": true,
    #     "requirePkce": true,
    #     "allowAccessTokensViaBrowser": true,
    #     "requireConsent": false,
    #     "consentLifetime": "30d",
    #     "alwaysIncludeUserClaimsInIdToken": false,
    #     "identityTokenLifetime": "5m",
    #     "accessTokenLifetime": "1h",
    #     "authorizationCodeLifetime": "5m",
    #     "allowOfflineAccess": false,
    #     "updateAccessTokenClaimsOnRefresh": false,
    #     "useOneTimeRefreshTokens": false,
    #     "slidingRefreshTokenLifetime": "15d",
    #     "absoluteRefreshTokenLifetime": "30d",
    #     "published": false,
    #     "url": "https://example.com/vm",
    #     "logoUrl": null,
    #     "frontChannelLogoutUrl": null,
    #     "backChannelLogoutUrl": null,
    #     "redirectUrls": [
    #       { "value": "https://example.com/console/auth-callback" },
    #       { "value": "https://example.com/console/auth-callback-silent" }
    #     ],
    #     "postLogoutUrls": [{ "value": "https://example.com/console" }],
    #     "corsUrls": [{ "value": "https://example.com" }],
    #     "alwaysSendClientClaims": false,
    #     "clientClaimsPrefix": "client_",
    #     "claims": [],
    #     "secrets": [],
    #     "managers": []
    #   }
  env: 
    ## basehref is path to the app
    APP_BASEHREF: ""

  # Config app settings with a JSON file.
  # These values correspond to an OpenID connect client and some basic settings
  settings: |-
    {
      "ConsoleApiUrl": "https://vm.example.com/api/",
      "OIDCSettings": {
        "authority": "https://identity.example.com",
        "client_id": "vm-console-ui-dev",
        "redirect_uri": "https://console.example.com/auth-callback/",
        "post_logout_redirect_uri": "https://console.example.com",
        "response_type": "code",
        "scope": "openid profile player-api vm-api vm-console-api",
        "automaticSilentRenew": true,
        "silent_redirect_uri": "https://console.example.com/auth-callback-silent/"
      },
      "UseLocalAuthStorage": true,
      "VmResolutionOptions": [
        { "width": 2560, "height": 1600 },
        { "width": 1920, "height": 1440 },
        { "width": 1920, "height": 1200 },
        { "width": 1600, "height": 1200 },
        { "width": 1400, "height": 1050 },
        { "width": 1280, "height": 1024 },
        { "width": 1440, "height": 900 },
        { "width": 1280, "height": 960 },
        { "width": 1366, "height": 768 },
        { "width": 1280, "height": 800 },
        { "width": 1280, "height": 720 },
        { "width": 1024, "height": 768 },
        { "width": 800, "height": 600 }
      ]
    }