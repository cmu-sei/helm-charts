caster-api:

  # Docker image release version
  image:
    # Caster API version
    tag: "2.1.0"
  
  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-read-timeout: '86400'
      nginx.ingress.kubernetes.io/proxy-send-timeout: '86400'
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: caster.example.com
        paths:
        - /(api|swagger|hubs)
    tls:
      - secretName: ""
        hosts:
         - example.com

  # storage - either an existing pvc, the size for a new pvc, or emptyDir
  storage:
    existing: ""
    size: ""
    mode: ReadWriteOnce
    class: default

  # If this deployment needs to trust non-public certificates,
  # create a configMap with the needed certifcates and specify
  # the configMap name here
  certificateMap: ""

  # Gets placed in /etc/gitconfig to allow immediate Gitlab access via access token
  # Replace TOKEN with an access token created in Gitlab, and update the Gitlab URL
  gitconfig: '[url "https://git-access-token:TOKEN@gitlab.example.com/"]
        insteadOf = https://gitlab.example.com/'

  # Config app settings with environment vars.
  # Those most likely needing values are listed. For others,
  # see https://github.com/cmu-sei/crucible/blob/master/caster.api/src/Caster.Api/appsettings.json
  env:
    # Proxy Settings
    # http_proxy: proxy.example.com:9000
    # https_proxy: proxy.example.com:9000
    # HTTP_PROXY: proxy.example.com:9000
    # HTTPS_PROXY: proxy.example.com:9000
    # NO_PROXY: .local
    # no_proxy: .local

    # This deployment comes built in with a script to install Terraform and the necessary
    # plugins to run Caster properly.  Internet access is required for this script to run properly.
    # It's recommended that this should remain false.  Please see the file "terraform-installation.tpl"
    # for more information on the installation process.
    SKIP_TERRAFORM_INSTALLATION: false

    # VSphere settings:
    # TODO - Document VSphere user role requirements
    VSPHERE_SERVER: vcenter.example.com
    VSPHERE_USER: caster-account@vsphere.local
    VSPHERE_PASSWORD: 
    VSPHERE_ALLOW_UNVERIFIED_SSL: true

    # See here for more information regarding AllowedHosts
    # https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hostfiltering.hostfilteringoptions.allowedhosts?view=aspnetcore-3.1
    AllowedHosts: "*"

    # CORS policy settings.
    # The first entry should be the URL to Caster
    CorsPolicy__Origins__0: "https://caster.example.com"

    # Connection String to database
    ConnectionStrings__PostgreSQL: "Server=postgres;Port=5432;Database=caster_api;Username=caster_dbu;Password=;"

    # OAuth2 Identity Client for Application
    Authorization__Authority: https://identity.example.com
    Authorization__AuthorizationUrl: https://identity.example.com/connect/authorize
    Authorization__AuthorizationScope: "caster-api"
    Authorization__ClientId: caster-api-dev

    # OAuth2 Identity Client /w Password
    Client__TokenUrl: https://identity.example.com/connect/token
    Client__ClientId: caster-admin
    Client__UserName: 
    Client__Password: 
    Client__Scope: "player-api vm-api"

    # Crucible Player URLs
    Player__VmApiUrl: "https://vm.example.com"
    Player__VmConsoleUrl: "https://console.example.com/vm/{id}/console"

    # Terraform Information
    # - DefaultVersion - The default version to be used.
    # - GitlabApiUrl - URL to the deployed Gitlab instance
    # - TODO - Add link to Installation Documentation on how to get GItlabTaken and GitlabGroupId
    Terraform__DefaultVersion: "0.14.0"
    Terraform__GitlabApiUrl: "https://gitlab.example.com/api/v4/"
    Terraform__GitlabToken: "TuyAi5abFvbSLpoDc9C2"
    Terraform__GitlabGroupId: 6

    # Configurable save lengths for Caster untagged versions
    FileVersions__DaysToSaveAllUntaggedVersions: 7
    FileVersions__DaysToSaveDailyUntaggedVersions: 31

    # Basic seed data to jumpstart deployement
    # TODO - Document seed data
    SeedData__Users__0__id: 
    SeedData__Users__0__name: 

    SeedData__Users__1__id: 
    SeedData__Users__1__name: 

    SeedData__UserPermissions__0__UserId: 
    SeedData__UserPermissions__0__PermissionId: 
    SeedData__UserPermissions__1__UserId: 
    SeedData__UserPermissions__1__PermissionId: 


caster-ui:

  # Docker image release version
  image:
    tag: "2.1.0"

  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: caster.example.com
        paths:
        - /
    tls:
      - secretName: ""
        hosts:
         - example.com

  # Config app settings with a JSON file.
  # These values correspond to an OpenID connect client
  settings: '{
    "ApiUrl": "https://caster.example.com",
    "OIDCSettings": {
      "authority": "https://identity.example.com/",
      "client_id": "caster-ui-dev",
      "redirect_uri": "https://caster.example.com/auth-callback/",
      "post_logout_redirect_uri": "https://caster.example.com/",
      "response_type": "id_token token",
      "scope": "openid profile email caster-api",
      "automaticSilentRenew": true,
      "silent_redirect_uri": "https://caster.example.com/auth-callback-silent/"
    },
    "UseLocalAuthStorage": true
  }'

gitlab:
  # Docker image release version
  image:
    tag: "13.2.3-ce.0"

  # Ingress configuration example for NGINX
  # TLS and Host URLs need configured
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: gitlab.example.com
        paths:
        - /
    tls:
      - secretName: ""
        hosts:
         - example.com


  # If this deployment needs to trust non-public certificates,
  # create a configMap with the needed certifcates and specify
  # the configMap name here
  certificateMap: ""

  # Initial Root Password for Gitlab container, must be set
  initialRootPassword: ""

  # storage - either an existing pvc, the size for a new pvc, or emptyDir
  storage:
    existing: ""
    size: ""
    mode: ReadWriteOnce
    class: default

  env:
    GITLAB_OMNIBUS_CONFIG: "from_file('/conf/gitlab.rb')"
    https_proxy: ""
    http_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
    NO_PROXY: ""
    no_proxy: ""

  # The following are Gitlab configuration settings that should be reviewed carefully.

  # Defaults should be acceptable, unless noted below:

  # - external_url - The external URL that users will type to access Gitlab
  # - gitlab_rails["env"] - The required proxy settings
  # - gitlab_rails["db_host"] - The URL to the Postgres database
  # - gitlab_rails["db_username"] - The username chosen for the Postgres database
  # - gitlab_rails["db_password"] - The password chosen for the Postgres database
  # - gitlab_rails["omniauth_providers"]["args"]["issuer"] - The URL of the Identity server
  # - gitlab_rails["omniauth_providers"]["args"]["client_options"]["host"] - The URL of the Identity server without https://
  # - gitlab_rails["omniauth_providers"]["args"]["client_options"]["redirect_uri"] - The URL of redirect URI for Gitlab
  # - gitlab_rails["omniauth_providers"]["args"]["client_options"]["identifier"] - The Gitlab client ID in Identity

  settings: 'external_url "https://gitlab.example.com";

  letsencrypt["enable"] = false;

  gitlab_rails["initial_root_password"] = File.read("/secrets/initial_root_password");

  gitlab_rails["env"] = {
    "http_proxy" => "proxy.example.com:9000",
    "https_proxy"=> "proxy.example.com:9000",
    "no_proxy" => ".local"
  };

  gitlab_rails["backup_path"] = "/backup";

  gitlab_rails["manage_backup_path"] = false;

  gitlab_workhorse["listen_network"] = "tcp";

  gitlab_workhorse["listen_addr"] = "127.0.0.1:8181";

  gitlab_rails["db_adapter"] = "postgresql";

  gitlab_rails["db_encoding"] = "unicode";

  gitlab_rails["db_host"] = "caster-caster-psql";

  postgresql["db_sslmode"] = "require";

  gitlab_rails["db_username"] = "gitlab";

  gitlab_rails["db_password"] = "password";

  nginx["enable"] = true;

  nginx["redirect_http_to_https"] = false;

  nginx["listen_port"] = 80;

  nginx["listen_https"] = false;

  nginx["http2_enabled"] = false;

  nginx["proxy_set_headers"] = {
    "Host" => "$http_host",
    "X-Real-IP" => "$remote_addr",
    "X-Forwarded-For" => "$proxy_add_x_forwarded_for",
    "X-Forwarded-Proto" => "https",
    "X-Forwarded-Ssl" => "on"
  };

  gitlab_rails["omniauth_enabled"] = true;

  gitlab_rails["omniauth_allow_single_sign_on"] = true;

  gitlab_rails["omniauth_block_auto_created_users"] = false;

  gitlab_rails["omniauth_auto_sign_in_with_provider"] = "identity";

  gitlab_rails["omniauth_providers"] = [
      {
          "name" => "openid_connect",
          "label" => "Identity",
          "args"=> {
              "name" => "identity",
              "scope" => ["openid","profile","email"],
              "response_type"=>"code",
              "discovery"=>true,
              "issuer" => "https://identity.example.com",
              "client_options" => {
                  "port" => "443",
                  "scheme" => "https",
                  "host" => "identity.example.com",
                  "identifier" => "gitlab",
                  "redirect_uri" => "https://gitlab.example.com/users/auth/identity/callback"
              }
          }
      }
  ];

  prometheus["enable"] = false;'